{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","value","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoItem","dispatch","selectedTodo","className","classNames","id","completed","title","onClick","currentTodoActions","TodoList","filteredTodos","useMemo","todosList","initialTodos","lowerQuery","toLowerCase","trim","searchedTodo","includes","visibleTodo","handleFilteringTodos","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","currentTarget","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUserId","handleUsers","a","userId","currentUser","useEffect","href","email","name","App","selectTodo","getTodosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7df8853.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodo, removeTodo };\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\nimport { State } from '../types/State';\n\ntype FilterTodoAction = {\n  type: 'filterTodo/SET';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype Action = SetQueryAction | FilterTodoAction;\n\nconst filterTodo = (value: Status):FilterTodoAction => ({\n  type: 'filterTodo/SET',\n  payload: value,\n});\n\nconst setQuery = (value: string):SetQueryAction => ({\n  type: 'query/SET',\n  payload: value,\n});\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filterTodo/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { filterTodo, setQuery };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodoAddAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (value: Todo[]):TodoAddAction => ({\n  type: 'todos/SET',\n  payload: value,\n});\n\ntype State = Todo[] | null;\n\nconst todosReducer = (\n  state: State = null,\n  action: TodoAddAction,\n): Todo[] | null => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [\n        ...(state || []),\n        ...action.payload,\n      ];\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const handleSelectTodo = (todoId: Todo) => {\n    dispatch(currentTodoActions.setTodo(todoId));\n  };\n\n  return (\n    <tr\n      className={classNames(\n        selectedTodo?.id === todo.id\n          ? 'has-background-info-light'\n          : '',\n      )}\n      data-cy=\"todo\"\n    >\n      <td className=\"is-vcentered\">\n        {todo.id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !todo.completed,\n            'has-text-success': todo.completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        {selectedTodo?.id === todo.id ? (\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n          >\n            <span className=\"icon\">\n              <i className=\"far fa-eye-slash\" />\n            </span>\n          </button>\n        ) : (\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => handleSelectTodo(todo)}\n          >\n            <span className=\"icon\">\n              <i className=\"far fa-eye\" />\n            </span>\n          </button>\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleFilteringTodos = (todosList: Todo[]) => {\n    let initialTodos = [...todosList];\n\n    if (query) {\n      const lowerQuery = query.toLowerCase().trim();\n\n      initialTodos = initialTodos.filter(searchedTodo => (\n        searchedTodo.title.toLowerCase().includes(lowerQuery)\n      ));\n    }\n\n    switch (status) {\n      case 'active':\n        initialTodos = initialTodos.filter(\n          visibleTodo => !visibleTodo.completed,\n        );\n        break;\n      case 'completed':\n        initialTodos = initialTodos.filter(\n          visibleTodo => visibleTodo.completed,\n        );\n        break;\n      case 'all':\n      default:\n        break;\n    }\n\n    return initialTodos;\n  };\n\n  const filteredTodos = useMemo(() => {\n    if (todos) {\n      return handleFilteringTodos(todos);\n    }\n\n    return [];\n  }, [todos, query, status]);\n\n  return (\n    <>\n      {filteredTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <TodoItem\n                todo={todo}\n                key={todo.id}\n              />\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const onChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.currentTarget.value));\n  };\n\n  const onChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.filterTodo(event.currentTarget.value as Status));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={onChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"\n        control\n        is-expanded\n        has-icons-left\n        has-icons-right\"\n      >\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"clear\"\n              className=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const [user, setUserId] = useState<User | null>(null);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const handleUsers = async () => {\n    const currentUser = await getUser(selectedTodo?.userId || 0);\n\n    setUserId(currentUser);\n  };\n\n  const closeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    handleUsers();\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">\n                  Done\n                </strong>\n              ) : (\n                <strong className=\"has-text-danger\">\n                  Planned\n                </strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  const getTodosFromServer = async () => {\n    const todosList = await getTodos();\n\n    dispatch(todosActions.setTodos(todosList));\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos\n                ? <TodoList />\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}